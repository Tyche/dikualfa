This is DikuMud alfa updated for newer systems.  The functionality is the 
same and maybe even the bugs.  Hopefully I didn't introduce any new ones.

This release was compiled and tested on the following platforms:

* Windows 10
  Embarcadero C++ 7.40 for Win64
  Microsoft (R) C/C++ Optimizing Compiler Version 19.25.28611 for x64 (Visual C++ 2019 Community)
  CYGWIN_NT-10.0 3.1.7 using gcc 10.2.0

* Ubuntu 16.04.7 LTS
  gcc version 5.4.0
  
* Debian GNU/Linux 9 (stretch)
  gcc version 6.3.0  

* openSUSE Leap 15.2
  gcc version 7.5.0

---------------------------------------------------------------------------------

Previous releases were compiled and tested on the following platforms:

* Microsoft Windows 7 Service Pack 1
  Microsoft Visual C/C++ v6.0 
  Microsoft Visual C/C++ v10.0 (Visual C++ 2010 Express)
  Embarcadero C++ 6.30 for Win32
  Borland C++ 5.5.1 for Win32 (free compiler release)
  Digital Mars C/C++ Compiler Version 8.42n
  CYGWIN_NT-6.1-WOW64 1.7.9(0.237/5/3) using gcc 4.3.4

* Microsoft Windows XP Service Pack 2 
  CYGWIN_NT-5.1 1.5.18(0.132/4/2) using gcc 3.4.4 (cygming special)
  CYGWIN_NT-5.1 1.5.12(0.116/4/2) using gcc 3.3.3 (cygming special)
  Borland C++ 5.5.1 for Win32 (free compiler release)
  Borland C++ 5.3 for Win32 (Builder v3.0)
  Digital Mars C/C++ Compiler Version 8.40.2n
  Microsoft Visual C/C++ v7.1 (Visual C++ Toolkit 2003)
  Microsoft Visual C/C++ v6.0
  Logiciels/Informatique lcc-win32 version 3.8 

* Microsoft Windows 98 SE 
  CYGWIN_98-4.10 1.5.12(0.116/4/2) using gcc 3.3.3 (cygwin special)

* Red Hat Fedora 12 i386 
  gcc version 4.2.2
  
* Red Hat Linux release 6.2 (Zoot) Kernel 2.2.14-5.0 on an i486 with 
  gcc version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)

* FreeBSD 8.1 amd64
  gcc version 4.2.1 [FreeBSD] 

* FreeBSD 5.3-BETA4 
  gcc version 3.4.2 [FreeBSD] 20040728

* Gentoo Linux 2.6.9-gentoo-r9 
  gcc version 3.3.4 20040623 (Gentoo Linux 3.3.4-r1, ssp-3.3.2-2, pie-8.7.6)

* Debian 5.0.0 Linux 2.6.26-2-amd64
  gcc version 4.3.2 (Debian 4.3.2-1.1)

* Debian Linux 2.6.8-1-38  
  gcc version 3.3.5 (Debian 1:3.3.5=5)

* OpenSuSE 11.2 x86_64
  gcc (SUSE Linux) 4.4.1 

* Linux Mint 18.3
  gcc version 5.4.0

* SuSE Linux 2.6.4-52-default
  gcc version 3.3.3 (SuSE Linux)
  
---------------------------------------------------------------------------------

Installation

For all operating systems install 'cmake' which can be obtained at:
  https://cmake.org/

* For Linux and Cygwin 
  type './cmake_unix.sh'
* For Windows using the Embarcadero compiler  
  Install 'ninja' which can be obtained at:
    https://github.com/ninja-build/ninja/releases
  type 'cmake_bcc64'
* For Windows using Microsift Visual C++ compiler
  type 'cmake_vc64'

The server and utilities will be compiled to the 'build' directory

To run the server from the currentt directory
  type 'build/dmserver' or 'build\dmserver' depending on your OS shell.

The server will boot on port 4000
The first user logging in will be created as the adminstrator.

Read the readme file and files in the doc directory for more information
on how to use it.  


---------------------------------------------------------------------------------

Old Installation using older compilers and included makefiles 

  * For Linux and Cygwin - type 'make'.   

  * For FreeBSD - type 'gmake'.
  
  * For Windows using Borland/Embarcadero - ensure the /Embarcadero compiler bin 
    directory is in your path, then type 'make -f makefile.bor'.
    - All executables will be linked with the RTL and without debugging symbols.
      To link a static executable   -   use 'make -f makefile.bor -DSTATIC'.
      To include debugging symbols  -   use 'make -f makefile.bor -DDEBUG'.
      Or for both                   -   use 'make -f makefile.bor -DDEBUG -DSTATIC'.

  * For Windows using Digital Mars - ensure the Digital Mars bin directory 
    is in your path, then type 'make -f makefile.dgm'.

  * For Windows using Microsoft Visual C - ensure your Visual C bin directory
    is in your path and your INCLUDE and LIBS environment variables are setup
    correctly.
    - With Visual C++ 6.0 you may need to run the vcvars32.bat file.
    - With Visual C++ 2010 Express and the Microsoft SDK you may need to use both 
      the setenv.cmd and vsvars32.bat
    - With Visual C++ 2017 Community edition start the 
      "x86 Native Tools Command Prompt for VS 2017"  
    Then type 'nmake -f makefile.vc'
    - To link with debugging information type 'set DEBUG=1' and then use
      'nmake -f makefile.vc'

  * For Windows using LCC - ensure the LCC bin directory is in your path, 
    then type 'make -f makefile.lcc'.  

Read the readme file and files in the doc directory on how to use it.  

Note that some of the utilities have problems.  The delplay utility on
Windows needs some fixing to work.  The nightrun script does work
correctly on linuxes but you'd probably want to modify it.

This code and my changes are released under the original conditions of
the Dikimud license which are found in doc/license.doc.

Enjoy.

Jon Lambert - aka Tyche
jlsysinc@hotmail.com
